name: Test Python Package

on:
  push:
    branches:
      - develop
      - main

jobs:
  test:
    name: Test - Linux Python ${{ matrix.python-version }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: False
      matrix:
        python-version:
          - '3.8'
          - '3.9'
          - '3.10'
    steps:
      - name: Check out repository code
        uses: actions/checkout@v3
      - name: Setup Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          cache: pipenv
      - name: Install pipenv
        run: |
          python -m pip install --upgrade pip
          python -m pip install --upgrade pipenv
      - id: cache-pipenv
        uses: actions/cache@v3
        with:
          path: ~/.local/share/virtualenvs
          key: ${{ runner.os }}-python-${{ steps.setup-python.outputs.python-version }}-pipenv-${{ hashFiles('Pipfile.lock') }}
      - name: Install dependencies
        if: steps.cache-pipenv.outputs.cache-hit != 'true'
        run: pipenv install --deploy --dev
      - name: Run unit tests
        run: pipenv run pytest --cov=src --cov-report=term-missing --junitxml=junit/test-results.xml --cov-report=xml
      - name: Upload Coverage
        uses: actions/upload-artifact@v3
        with:
          name: coverage
          path: .coverage
      - name: Upload pytest test results
        uses: actions/upload-artifact@v3
        with:
          name: pytest-results-${{ matrix.python-version }}
          path: junit/test-results-${{ matrix.python-version }}.xml
        if: ${{ always() }}
  security:
    name: Security - Linux Python ${{ matrix.python-version }}
    continue-on-error: True
    runs-on: ubuntu-latest
    strategy:
      fail-fast: False
      matrix:
        python-version:
          - '3.8'
          - '3.9'
          - '3.10'
    steps:
      - name: Audit packages
        run: pipenv run pip-audit
  check:
    name: Check - Linux Python ${{ matrix.python-version }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: False
      matrix:
        python-version:
          - '3.8'
          - '3.9'
          - '3.10'
    steps:
      - name: Check code format with black
        run: pipenv run black --diff --check $(git ls-files '*.py')
      - name: Lint with flake8
        run: pipenv run flake8 --config setup.cfg --show-source --statistics $(git ls-files '*.py')
      - name: Lint with mypy
        run: pipenv run mypy $(git ls-files '*.py')
      - name: Lint with pylint
        run: pipenv run pylint $(git ls-files '*.py')
  coverage:
    name: Coverage - Linux Python 3.8
    runs-on: ubuntu-latest
    needs:
      - test
    steps:
      - uses: actions/checkout@v3
      - name: Download coverage
        uses: actions/download-artifact@v3
        with:
          name: coverage
      - name: Create coverage badge
        uses: tj-actions/coverage-badge-py@v1.8
      - name: Verify coverage badge changed
        uses: tj-actions/verify-changed-files@v9
        id: changed_files
        with:
          files: coverage.svg
      - name: Commit coverage badge
        if: steps.changed_files.outputs.files_changed == 'true'
        run: |
          git config --local user.email "mh@superbox.one"
          git config --local user.name "Michael Hacker"
          git add coverage.svg
          git commit -m "Updated coverage.svg"
      - name: Push changes
        if: steps.changed_files.outputs.files_changed == 'true'
        uses: ad-m/github-push-action@master
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          branch: ${{ github.ref }}
