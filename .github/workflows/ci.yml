name: CI

on:
  push:
    branches:
      - develop
      - main

env:
  PIP_CACHE_DIR: ${{ github.workspace }}/.cache/pip
  PIPENV_CACHE_DIR: ${{ github.workspace }}/.cache/pipenv
  PYTHONUSERBASE: ${{ github.workspace }}/.local
  WORKON_HOME: ${{ github.workspace }}/.local/.venv
  PIPENV_NOSPIN: 'true'

jobs:
  build:
    name: Build - Linux Python ${{ matrix.python-version }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version:
          - '3.8'
          - '3.9'
          - '3.10'
    steps:
      - name: Update system path
        run: echo "${{ env.PYTHONUSERBASE }}/bin" >> $GITHUB_PATH
      - name: Check out repository
        uses: actions/checkout@v3
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
      - name: Cache virtualenv
        id: cache-virtualenv
        uses: actions/cache@v3
        with:
          path: |
            ${{ github.workspace }}/.cache
            ${{ github.workspace }}/.local
          key: python-${{ matrix.python-version }}-${{ github.run_id }}
      - name: Install pipenv
        run: |
          python --version
          python -m pip install --user --upgrade pip
          python -m pip install --user pipenv
      - name: Install dependencies
        run: |
          pipenv install --deploy --dev


  tests:
    name: Tests - Linux Python ${{ matrix.python-version }}
    needs:
      - build
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version:
          - '3.8'
          - '3.9'
          - '3.10'
    steps:
      - name: Update system path
        run: echo "${{ env.PYTHONUSERBASE }}/bin" >> $GITHUB_PATH
      - name: Check out repository
        uses: actions/checkout@v3
      - name: Run unit tests
        run: pipenv run pytest --cov=src --cov-report=term-missing --junitxml=junit/test-results.xml --cov-report=xml
      - name: Upload coverage
        uses: actions/upload-artifact@v3
        with:
          name: python-${{ matrix.python-version }}-coverage
          path: .coverage
      - name: Upload pytest test results
        uses: actions/upload-artifact@v3
        with:
          name: pytest-results-${{ matrix.python-version }}
          path: junit/test-results.xml
        if: ${{ always() }}
  security:
    name: Security - Linux Python ${{ matrix.python-version }}
    needs:
      - build
    continue-on-error: True
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version:
          - '3.8'
          - '3.9'
          - '3.10'
    steps:
      - name: Update system path
        run: echo "${{ env.PYTHONUSERBASE }}/bin" >> $GITHUB_PATH
      - name: Check out repository
        uses: actions/checkout@v3
      - name: Cache virtualenv
        id: cache-virtualenv
        uses: actions/cache@v3
        with:
          path: |
            ${{ github.workspace }}/.cache
            ${{ github.workspace }}/.local
          key: python-${{ matrix.python-version }}-${{ github.run_id }}
      - name: Audit packages
        run: pipenv run pip-audit
  check:
    name: Code Analyse - Linux Python ${{ matrix.python-version }}
    runs-on: ubuntu-latest
    needs:
      - build
    strategy:
      matrix:
        python-version:
          - '3.8'
          - '3.9'
          - '3.10'
    steps:
      - name: Update system path
        run: echo "${{ env.PYTHONUSERBASE }}/bin" >> $GITHUB_PATH
      - name: Check out repository
        uses: actions/checkout@v3
      - name: Cache virtualenv
        id: cache-virtualenv
        uses: actions/cache@v3
        with:
          path: |
            ${{ github.workspace }}/.cache
            ${{ github.workspace }}/.local
          key: python-${{ matrix.python-version }}-${{ github.run_id }}
      - name: Check code format with black
        run: |
          pipenv run black --version
          pipenv run black --diff --check .
      - name: Lint with flake8
        run: |
          pipenv run flake8 --version
          pipenv run flake8 --show-source --statistics $(git ls-files '*.py')
      - name: Lint with mypy
        run: pipenv run mypy src tests
      - name: Lint with pylint
        run: |
          pipenv run pylint --version
          pipenv run pylint src tests
  coverage:
    name: Coverage - Linux Python 3.8
    runs-on: ubuntu-latest
    needs:
      - tests
    steps:
      - name: Update system path
        run: echo "${{ env.PYTHONUSERBASE }}/bin" >> $GITHUB_PATH
      - name: Check out repository
        uses: actions/checkout@v3
      - name: Cache virtualenv
        id: cache-virtualenv
        uses: actions/cache@v3
        with:
          path: |
            ${{ github.workspace }}/.cache
            ${{ github.workspace }}/.local
          key: python-${{ matrix.python-version }}-${{ github.run_id }}
      - name: Download coverage
        uses: actions/download-artifact@v3
        with:
          name: python-3.8-coverage
      - name: Create coverage badge
        uses: tj-actions/coverage-badge-py@v1.8
      - name: Verify coverage badge changed
        uses: tj-actions/verify-changed-files@v9
        id: changed_files
        with:
          files: coverage.svg
      - name: Commit coverage badge
        if: steps.changed_files.outputs.files_changed == 'true'
        run: |
          git config --local user.email "mh@superbox.one"
          git config --local user.name "Michael Hacker"
          git add coverage.svg
          git commit -m "Updated coverage.svg"
      - name: Push changes
        if: steps.changed_files.outputs.files_changed == 'true'
        uses: ad-m/github-push-action@master
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          branch: ${{ github.ref }}
