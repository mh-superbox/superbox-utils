name: Release build

on:
  push:
    tags:
      - '*'

jobs:
  prepare_build:
    name: Prepare build
    runs-on: ubuntu-latest
    outputs:
      package_name: ${{ steps.global_vars.outputs.package_name }}
      package_alternate_name: ${{ steps.global_vars.outputs.package_alternate_name }}
      package_version: ${{ steps.global_vars.outputs.package_version }}
    steps:
      - name: Check out repository
        uses: actions/checkout@v3
      - name: Set global variables
        id: global_vars
        run: |
          echo "package_name=$(python setup.py --name)" >> $GITHUB_OUTPUT
          echo "package_version=$(python setup.py --version)" >> $GITHUB_OUTPUT
          echo $(python setup.py --name)
          echo $(python setup.py --version)
      - name: Check tag ${{ github.ref_name }}
        run: |
          tag_version="${{ github.ref_name }}"

          if [ "${tag_version}" != "${{ steps.global_vars.outputs.package_version }}" ]; then
            echo "Version number in package does not match tag! (${tag_version} vs. ${{ steps.global_vars.outputs.package_version }})."
            exit 1
          fi

  build_python_package:
    name: Upload package to PyPi
    needs:
      - prepare_build
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository
        uses: actions/checkout@v3
      - name: Build package
        run: |
          make build
      - name: Release ${{ github.ref_name }}
        uses: softprops/action-gh-release@v1
        with:
          name: ${{ github.ref_name }}
          # yamllint disable rule:line-length
          files: |
            ${{ github.workspace }}/output/${{ needs.prepare_build.outputs.package_alternate_name }}-${{ needs.prepare_build.outputs.package_version }}-py3-none-any.whl
            ${{ github.workspace }}/output/${{ needs.prepare_build.outputs.package_name }}-${{ needs.prepare_build.outputs.package_version }}.tar.gz
          # yamllint enable rule:line-length
      - name: Publish package
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          user: __token__
          password: ${{ secrets.PYPI_API_TOKEN }}
          packages-dir: output/dist
